/** Copyright (c) 2014 Filipe Badaro* License: https://github.com/Badaro/EDHScoreboard/blob/master/LICENSE)*/var mtgScoreboard = {	_counter: 0,	_playerList: {},	addPlayer: function(playerName, commanderName)	{		var normalizedPlayerName = playerName.replace(/[^-A-Za-z0-9]+/g, '').toLowerCase() + new Date().getTime();		var normalizedCommanderName = commanderName.replace(/[^-A-Za-z0-9]+/g, '').toLowerCase() + new Date().getTime();		if(this._playerList[normalizedPlayerName])		{			this.appendToLog('Attempted to add already existing player');			return;		}		this._playerList[normalizedPlayerName] = {			name: playerName,			commander: commanderName,			normalizedName: normalizedPlayerName,			normalizedCommander: normalizedCommanderName,			life: 40,			poison: 0,			commanderDamage: {}		};			var commanderList  = this.getFieldForAllPlayers('normalizedCommander');		for(var existingPlayer in this._playerList)		{			for(var i=0;i<commanderList.length;i++)			{				if(isNaN(this._playerList[existingPlayer].commanderDamage[commanderList[i]]))				{					this._playerList[existingPlayer].commanderDamage[commanderList[i]] = 0;				}			}		}		this.appendToLog('Adding player ' + this.getFieldForPlayer(normalizedPlayerName,'name') + ' with commander ' + this.getFieldForPlayer(normalizedPlayerName,'commander'));		this.render();	},		getFieldForPlayer: function(playerName, fieldName)	{		return(this._playerList[playerName][fieldName]);	},	getFieldForAllPlayers: function(fieldName)	{		var result = [];		for(var playerName in this._playerList)		{			result.push(this._playerList[playerName][fieldName]);		}		return(result);	},		incrementDamageAll: function(amount)	{		for(var playerName in this._playerList)		{			this._playerList[playerName].life += amount;		}		this.appendToLog('Applying ' + amount + ' of life to all players');		this.render();	},	incrementDamage: function(playerName, amount)	{		this._playerList[playerName].life += amount;		if(this._playerList[playerName].life<0) this._playerList[playerName].life=0;		this.appendToLog('Applying ' + amount + ' of life to player ' + this.getFieldForPlayer(playerName,'name'));		this.render();	},	incrementPoison: function(playerName, amount)	{		this._playerList[playerName].poison += amount;		if(this._playerList[playerName].poison<0) this._playerList[playerName].poison=0;		if(this._playerList[playerName].poison>10) this._playerList[playerName].poison=10;		this.appendToLog('Applying ' + amount + ' of poison damage to player ' + this.getFieldForPlayer(playerName,'name'));		this.render();	},	 	incrementCommanderDamage: function(playerName, commanderName, amount)	{		this._playerList[playerName].commanderDamage[commanderName] += amount;		if(this._playerList[playerName].commanderDamage[commanderName]<0) this._playerList[playerName].commanderDamage[commanderName]=0;		if(this._playerList[playerName].commanderDamage[commanderName]>21) this._playerList[playerName].commanderDamage[commanderName]=21;		this.appendToLog('Applying ' + amount + ' of damage from commander ' + this.getFieldForPlayer(playerName,'commander') + ' to player ' + this.getFieldForPlayer(playerName,'name'));		this.render();	},		setDamage: function(playerName, amount)	{		this._playerList[playerName].life = amount;		if(this._playerList[playerName].life<0) this._playerList[playerName].life=0;		this.appendToLog('Setting of life to player ' + this.getFieldForPlayer(playerName,'name') + ' to value ' + amount);		this.render();	},	setPoison: function(playerName, amount)	{		this._playerList[playerName].poison = amount;		if(this._playerList[playerName].poison<0) this._playerList[playerName].poison=0;		if(this._playerList[playerName].poison>10) this._playerList[playerName].poison=10;		this.appendToLog('Set poison damage to player ' + this.getFieldForPlayer(playerName,'name') + ' to value ' + amount);		this.render();	},	 	setCommanderDamage: function(playerName, commanderName, amount)	{		this._playerList[playerName].commanderDamage[commanderName] = amount;		if(this._playerList[playerName].commanderDamage[commanderName]<0) this._playerList[playerName].commanderDamage[commanderName]=0;		if(this._playerList[playerName].commanderDamage[commanderName]>21) this._playerList[playerName].commanderDamage[commanderName]=21;		this.appendToLog('Setting damage from commander ' + this.getFieldForPlayer(playerName,'commander') + ' to player ' + this.getFieldForPlayer(playerName,'name') + ' to value ' + amount);		this.render();	},		promptForAmount: function(callback)	{		bootbox.prompt('Set to which value?', function(result) {                		  if (result != null && !isNaN(result)) {                                             			callback(result);		  }		});	},	 	render: function()	{		// Header		$('#mainContainer').html('');		$('#mainContainer').append('<table class="" />');		$('#mainContainer table').addClass('table').addClass('table-striped');		$('#mainContainer table').append('<thead />');		$('#mainContainer table thead').append('<tr />');				var headers = [ {name: 'Player' }, { name: 'Life', buttons: true, clickFunction: function(amount){ mtgScoreboard.incrementDamageAll(amount); } }, { name: 'Poison' }];		for(var currentPlayer in this._playerList)		{			headers.push( { name: 'From<br />' + this._playerList[currentPlayer].commander });		}				for(var i=0;i<headers.length;i++)		{			$('#mainContainer table thead tr').append('<th />');			$('#mainContainer table thead tr th:last').addClass('col-md-1');			$('#mainContainer table thead tr th:last').append('<h4 />');			$('#mainContainer table thead tr th:last h4').html(headers[i].name);						if(headers[i].buttons)			{				this.renderButtons(headers[i].clickFunction, '#mainContainer table thead tr th:last');			}		}		$('#mainContainer table').append('<tbody />');				// Player List		for(var currentPlayer in this._playerList)		{			$('#mainContainer table tbody').append('<tr />');						$('#mainContainer table tbody tr:last').append('<td />');			$('#mainContainer table tbody tr:last td:last').append('<h2 />');			$('#mainContainer table tbody tr:last td:last h2').html(this._playerList[currentPlayer].name);			var columns = [];			columns.push({				value: this._playerList[currentPlayer].life,				min:  0,				max: 40,				descending:  true,				clickFunction: this.getClickFunction('damage', currentPlayer),				promptFunction:  this.getPromptFunction('damage', currentPlayer)			});			columns.push({				value: this._playerList[currentPlayer].poison,				min: 0,				max: 10,				descending: false,				clickFunction: this.getClickFunction('poison', currentPlayer),				promptFunction: this.getPromptFunction('poison', currentPlayer)			});						for(var relatedPlayer in this._playerList)			{				columns.push({					value: this._playerList[currentPlayer].commanderDamage[this._playerList[relatedPlayer].normalizedCommander],					min: 0,					max: 21,					descending: false,					clickFunction: this.getClickFunction('commanderDamage', currentPlayer, this._playerList[relatedPlayer].normalizedCommander),					promptFunction: this.getPromptFunction('commanderDamage', currentPlayer, this._playerList[relatedPlayer].normalizedCommander)				});			}						for(var i=0;i<columns.length;i++)			{				$('#mainContainer table tbody tr:last').append('<td />');				$('#mainContainer table tbody tr:last td:last').append('<h2/>');				$('#mainContainer table tbody tr:last td:last h2').append('<a />');				$('#mainContainer table tbody tr:last td:last h2 a').html(columns[i].value);				$('#mainContainer table tbody tr:last td:last h2 a').click(columns[i].promptFunction);							this.renderProgressBar('#mainContainer table tbody tr:last td:last', columns[i].value, columns[i].min, columns[i].max, columns[i].descending);				this.renderButtons(columns[i].clickFunction, '#mainContainer table tbody tr:last td:last');			}		}	},		getPromptFunction: function(type, playerName, commanderName)	{		var result = function() {};		if(type=='damage')		{			result = function(amount) { mtgScoreboard.setDamage(playerName, amount) };		}		if(type=='poison')		{			result = function(amount) { mtgScoreboard.setPoison(playerName, amount); };		}		if(type=='commanderDamage')		{			result = function(amount) { mtgScoreboard.setCommanderDamage(playerName,commanderName, amount); };		}		return(function(){ mtgScoreboard.promptForAmount(result); });	},		getClickFunction: function(type, playerName, commanderName)	{		var result = function() {};		if(type=='damage')		{			result = function(amount) { mtgScoreboard.incrementDamage(playerName, amount) };		}		if(type=='poison')		{			result = function(amount) { mtgScoreboard.incrementPoison(playerName, amount); };		}		if(type=='commanderDamage')		{			result = function(amount) { mtgScoreboard.incrementCommanderDamage(playerName,commanderName, amount); };		}		return(result);	},	 	renderButtons: function(clickFunction, parentElement)	{		$(parentElement).append('<button>+1</button>');		$(parentElement + ' button:last').addClass('btn').addClass('btn-default').addClass('btn-xs').addClass('lifeButton');		$(parentElement + ' button:last').click(function(){clickFunction(1);});		$(parentElement).append('<button>-1</button>');		$(parentElement + ' button:last').addClass('btn').addClass('btn-default').addClass('btn-xs').addClass('lifeButton');		$(parentElement + ' button:last').click(function(){clickFunction(-1);});		$(parentElement).append('<button>+5</button>');		$(parentElement + ' button:last').addClass('btn').addClass('btn-default').addClass('btn-xs').addClass('lifeButton');		$(parentElement + ' button:last').click(function(){clickFunction(+5);});		$(parentElement).append('<button>-5</button>');		$(parentElement + ' button:last').addClass('btn').addClass('btn-default').addClass('btn-xs').addClass('lifeButton');		$(parentElement + ' button:last').click(function(){clickFunction(-5);});	},	 	renderProgressBar: function(destination, current, min, max, descending)	{		$(destination).append('<div />');		$(destination + ' div').addClass('progress');		$(destination + ' div').css('margin-bottom','5px');				$(destination + ' div').append('<div />');		var width = 0;		if(current >= max) width = 100;		else width = Math.floor(100 * current/max);				var className = 'progress-bar-info'		if(descending)		{						if(width>=75) className = 'progress-bar-success';			else if(width>=50 && width <75) className = 'progress-bar-info';			else if(width>=25 && width <50) className = 'progress-bar-warning';			else if(width <25) className = 'progress-bar-danger';		}		else		{			if(width<25) className = 'progress-bar-success';			else if(width>=25 && width <50) className = 'progress-bar-info';			else if(width>=50 && width <75) className = 'progress-bar-warning';			else if(width >=75) className = 'progress-bar-danger';		}				$(destination + ' div.progress div').addClass('progress-bar').addClass(className);		$(destination + ' div.progress div').css('width', width + '%');	 },	 	 appendToLog: function(message)	 {		var currentLog = $('#logContainer textArea').html();		$('#logContainer textArea').html(message + '\n' + currentLog);	 }};$(document).ready(){	$('#addButton').click(function()	{		var playerName = $('#inputPlayer').val();		var commanderName = $('#inputCommander').val();				if(playerName!='' && commanderName!='')		{			mtgScoreboard.addPlayer (playerName,commanderName);			$('#inputPlayer').val('');			$('#inputCommander').val('');			$('#inputPlayer').focus();		}			return(false);	});		$('#showHideLogButton').click(function()	{		$('textarea.logDisplay').toggle();				return(false);	});}